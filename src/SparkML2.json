{"paragraphs":[{"text":"import java.io.File\nimport scala.io.Source\n\nimport org.apache.log4j.Logger\nimport org.apache.log4j.Level\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd._\nimport org.apache.spark.mllib.recommendation.{ALS, Rating, MatrixFactorizationModel}\n","user":"anonymous","dateUpdated":"2020-03-04T04:15:18+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import java.io.File\nimport scala.io.Source\nimport org.apache.log4j.Logger\nimport org.apache.log4j.Level\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd._\nimport org.apache.spark.mllib.recommendation.{ALS, Rating, MatrixFactorizationModel}\n"}]},"apps":[],"jobName":"paragraph_1583295249384_1654651982","id":"20200304-041409_1258372232","dateCreated":"2020-03-04T04:14:09+0000","dateStarted":"2020-03-04T04:15:18+0000","dateFinished":"2020-03-04T04:15:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2013"},{"text":"val movieLensHomeDir = \"s3://mahout-assignment/\"\n\nval movies = sc.textFile(movieLensHomeDir + \"movies.dat\").map { line =>\n  val fields = line.split(\"::\")\n  // format: (movieId, movieName)\n  (fields(0).toInt, fields(1))\n}.collect.toMap\n\nval ratings = sc.textFile(movieLensHomeDir + \"ratings.dat\").map { line =>\n  val fields = line.split(\"::\")\n  // format: (timestamp % 10, Rating(userId, movieId, rating))\n  (fields(3).toLong % 10, Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble))\n}\n","user":"anonymous","dateUpdated":"2020-03-04T04:15:26+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"movieLensHomeDir: String = s3://mahout-assignment/\nmovies: scala.collection.immutable.Map[Int,String] = Map(2163 -> Attack of the Killer Tomatoes! (1980), 645 -> Nelly & Monsieur Arnaud (1995), 892 -> Twelfth Night (1996), 69 -> Friday (1995), 2199 -> Phoenix (1998), 3021 -> Funhouse, The (1981), 1322 -> Amityville 1992: It's About Time (1992), 1665 -> Bean (1997), 1036 -> Die Hard (1988), 2822 -> Medicine Man (1992), 2630 -> Besieged (L' Assedio) (1998), 3873 -> Cat Ballou (1965), 1586 -> G.I. Jane (1997), 1501 -> Keys to Tulsa (1997), 2452 -> Gate II: Trespassers, The (1990), 809 -> Fled (1996), 1879 -> Hanging Garden, The (1997), 1337 -> Body Snatcher, The (1945), 1718 -> Stranger in the House (1997), 2094 -> Rocketeer, The (1991), 3944 -> Bootmen (2000), 1411 -> Hamlet (1996), 629 -..."}]},"apps":[],"jobName":"paragraph_1583295318684_-1474899941","id":"20200304-041518_1313190106","dateCreated":"2020-03-04T04:15:18+0000","dateStarted":"2020-03-04T04:15:26+0000","dateFinished":"2020-03-04T04:15:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2014"},{"text":"val numRatings = ratings.count\nval numUsers = ratings.map(_._2.user).distinct.count\nval numMovies = ratings.map(_._2.product).distinct.count\n\nprintln(\"Got \" + numRatings + \" ratings from \"\n  + numUsers + \" users on \" + numMovies + \" movies.\")","user":"anonymous","dateUpdated":"2020-03-04T04:15:35+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Got 1000209 ratings from 6040 users on 3706 movies.\nnumRatings: Long = 1000209\nnumUsers: Long = 6040\nnumMovies: Long = 3706\n"}]},"apps":[],"jobName":"paragraph_1583295326214_1470248608","id":"20200304-041526_62539748","dateCreated":"2020-03-04T04:15:26+0000","dateStarted":"2020-03-04T04:15:35+0000","dateFinished":"2020-03-04T04:15:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2015"},{"text":"val training = ratings.filter(x => x._1 < 6)\n  .values\n  .cache()\nval validation = ratings.filter(x => x._1 >= 6 && x._1 < 8)\n  .values\n  .cache()\nval test = ratings.filter(x => x._1 >= 8).values.cache()\n\nval numTraining = training.count()\nval numValidation = validation.count()\nval numTest = test.count()\n\nprintln(\"Training: \" + numTraining + \", validation: \" + numValidation + \", test: \" + numTest)","user":"anonymous","dateUpdated":"2020-03-04T04:15:46+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Training: 602241, validation: 198919, test: 199049\ntraining: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[2592] at values at <console>:72\nvalidation: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[2594] at values at <console>:75\ntest: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[2596] at values at <console>:77\nnumTraining: Long = 602241\nnumValidation: Long = 198919\nnumTest: Long = 199049\n"}]},"apps":[],"jobName":"paragraph_1583295335634_-476183561","id":"20200304-041535_2128607663","dateCreated":"2020-03-04T04:15:35+0000","dateStarted":"2020-03-04T04:15:46+0000","dateFinished":"2020-03-04T04:15:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2016"},{"text":"/** Compute RMSE (Root Mean Squared Error). */\ndef computeRmse(model: MatrixFactorizationModel, data: RDD[Rating], n: Long): Double = {\n    val predictions: RDD[Rating] = model.predict(data.map(x => (x.user, x.product)))\n    val predictionsAndRatings = predictions.map(x => ((x.user, x.product), x.rating))\n    .join(data.map(x => ((x.user, x.product), x.rating))).values\n    math.sqrt(predictionsAndRatings.map(x => (x._1 - x._2) * (x._1 - x._2)).reduce(_ + _) / n)\n}","user":"anonymous","dateUpdated":"2020-03-04T04:15:56+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"computeRmse: (model: org.apache.spark.mllib.recommendation.MatrixFactorizationModel, data: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating], n: Long)Double\n"}]},"apps":[],"jobName":"paragraph_1583295346234_-289038641","id":"20200304-041546_1893847043","dateCreated":"2020-03-04T04:15:46+0000","dateStarted":"2020-03-04T04:15:56+0000","dateFinished":"2020-03-04T04:15:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2017"},{"text":"val ranks = List(8, 12)\nval lambdas = List(0.1, 10.0)\nval numIters = List(10, 20)\nvar bestModel: Option[MatrixFactorizationModel] = None\nvar bestValidationRmse = Double.MaxValue\nvar bestRank = 0\nvar bestLambda = -1.0\nvar bestNumIter = -1\nfor (rank <- ranks; lambda <- lambdas; numIter <- numIters) {\n  val model = ALS.train(training, rank, numIter, lambda)\n  val validationRmse = computeRmse(model, validation, numValidation)\n  println(\"RMSE (validation) = \" + validationRmse + \" for the model trained with rank = \" \n    + rank + \", lambda = \" + lambda + \", and numIter = \" + numIter + \".\")\n  if (validationRmse < bestValidationRmse) {\n    bestModel = Some(model)\n    bestValidationRmse = validationRmse\n    bestRank = rank\n    bestLambda = lambda\n    bestNumIter = numIter\n  }\n}","user":"anonymous","dateUpdated":"2020-03-04T04:16:06+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"RMSE (validation) = 0.8818983799222262 for the model trained with rank = 8, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8726011540415028 for the model trained with rank = 8, lambda = 0.1, and numIter = 20.\nRMSE (validation) = 3.7558695311242833 for the model trained with rank = 8, lambda = 10.0, and numIter = 10.\nRMSE (validation) = 3.7558695311242833 for the model trained with rank = 8, lambda = 10.0, and numIter = 20.\nRMSE (validation) = 0.8783447536554992 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8707999904528391 for the model trained with rank = 12, lambda = 0.1, and numIter = 20.\nRMSE (validation) = 3.7558695311242833 for the model trained with rank = 12, lambda = 10.0, and numIter = 10.\nRMSE (validation) = 3.7558695311242833 for the model trained with rank = 12, lambda = 10.0, and numIter = 20.\nranks: List[Int] = List(8, 12)\nlambdas: List[Double] = List(0.1, 10.0)\nnumIters: List[Int] = List(10, 20)\nbestModel: Option[org.apache.spark.mllib.recommendation.MatrixFactorizationModel] = Some(org.apache.spark.mllib.recommendation.MatrixFactorizationModel@36a48837)\nbestValidationRmse: Double = 0.8707999904528391\nbestRank: Int = 12\nbestLambda: Double = 0.1\nbestNumIter: Int = 20\n"}]},"apps":[],"jobName":"paragraph_1583295356854_838039845","id":"20200304-041556_1742448527","dateCreated":"2020-03-04T04:15:56+0000","dateStarted":"2020-03-04T04:16:06+0000","dateFinished":"2020-03-04T04:16:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2018"},{"text":"// evaluate the best model on the test set\nval testRmse = computeRmse(bestModel.get, test, numTest)\n\nprintln(\"The best model was trained with rank = \" + bestRank + \" and lambda = \" + bestLambda\n  + \", and numIter = \" + bestNumIter + \", and its RMSE on the test set is \" + testRmse + \".\")","user":"anonymous","dateUpdated":"2020-03-04T04:16:59+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"The best model was trained with rank = 12 and lambda = 0.1, and numIter = 20, and its RMSE on the test set is 0.868739765793423.\ntestRmse: Double = 0.868739765793423\n"}]},"apps":[],"jobName":"paragraph_1583295366729_-1409179134","id":"20200304-041606_1372161833","dateCreated":"2020-03-04T04:16:06+0000","dateStarted":"2020-03-04T04:16:59+0000","dateFinished":"2020-03-04T04:17:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2019"},{"text":"// create a naive baseline and compare it with the best model\nval meanRating = training.union(validation).map(_.rating).mean\nval baselineRmse = \n  math.sqrt(test.map(x => (meanRating - x.rating) * (meanRating - x.rating)).mean)\nval improvement = (baselineRmse - testRmse) / baselineRmse * 100\nprintln(\"The best model improves the baseline by \" + \"%1.2f\".format(improvement) + \"%.\")","user":"anonymous","dateUpdated":"2020-03-04T04:17:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"The best model improves the baseline by 21.98%.\nmeanRating: Double = 3.5809888162164945\nbaselineRmse: Double = 1.113513689532065\nimprovement: Double = 21.982120744425153\n"}]},"apps":[],"jobName":"paragraph_1583295419299_-268272384","id":"20200304-041659_962949477","dateCreated":"2020-03-04T04:16:59+0000","dateStarted":"2020-03-04T04:17:09+0000","dateFinished":"2020-03-04T04:17:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2020"},{"text":"val candidates = sc.parallelize(movies.keys.toSeq)\nval recommendations = bestModel.get\n  .predict(candidates.map((100, _)))\n  .collect()\n  .sortBy(- _.rating)\n  .take(10)\n\nvar i = 1\nprintln(\"Movies recommended for you:\")\nrecommendations.foreach { r =>\n  println(\"%2d\".format(i) + \": \" + movies(r.product))\n  i += 1\n}\n","user":"anonymous","dateUpdated":"2020-03-04T04:17:23+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Movies recommended for you:\n 1: Bewegte Mann, Der (1994)\n 2: For All Mankind (1989)\n 3: Bandits (1997)\n 4: Man of the Century (1999)\n 5: Sanjuro (1962)\n 6: Godfather, The (1972)\n 7: Chushingura (1962)\n 8: Shawshank Redemption, The (1994)\n 9: Schindler's List (1993)\n10: Raiders of the Lost Ark (1981)\ncandidates: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[5131] at parallelize at <console>:72\nrecommendations: Array[org.apache.spark.mllib.recommendation.Rating] = Array(Rating(100,811,4.0179270494954284), Rating(100,3338,3.716723791268948), Rating(100,2562,3.713805313536754), Rating(100,2999,3.6981331154329107), Rating(100,2905,3.6682778709083923), Rating(100,858,3.617878258202588), Rating(100,3092,3.614709571016145), Rating(100,318,3.613967198527533), Rating(100,527,3.5997954777863037), Rating(100,1198,3.59668486166587))\ni: Int = 11\n"}]},"apps":[],"jobName":"paragraph_1583295429434_1688968531","id":"20200304-041709_558590604","dateCreated":"2020-03-04T04:17:09+0000","dateStarted":"2020-03-04T04:17:23+0000","dateFinished":"2020-03-04T04:17:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2021"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1583295443049_-1826901602","id":"20200304-041723_1144704728","dateCreated":"2020-03-04T04:17:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2022","text":"val moviesWithGenres = sc.textFile(movieLensHomeDir + \"movies.dat\").map { line =>\n  val fields = line.split(\"::\")\n  // format: (movieId, movieName, genre information)\n  (fields(0).toInt, fields(2))\n}.collect.toMap","dateUpdated":"2020-03-04T04:17:40+0000","dateFinished":"2020-03-04T04:17:40+0000","dateStarted":"2020-03-04T04:17:40+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"moviesWithGenres: scala.collection.immutable.Map[Int,String] = Map(2163 -> Comedy|Horror, 645 -> Drama, 892 -> Comedy|Drama|Romance, 69 -> Comedy, 2199 -> Crime|Drama, 3021 -> Horror, 1322 -> Horror, 1665 -> Comedy, 1036 -> Action|Thriller, 2822 -> Adventure|Romance, 2630 -> Drama, 3873 -> Comedy|Western, 1586 -> Action|Drama|War, 1501 -> Crime, 2452 -> Horror, 809 -> Action|Adventure, 1879 -> Drama, 1337 -> Horror, 1718 -> Thriller, 2094 -> Action|Adventure|Sci-Fi, 3944 -> Comedy|Drama, 1411 -> Drama, 629 -> Drama, 3883 -> Comedy|Drama, 2612 -> Drama, 1024 -> Animation|Children's|Musical, 365 -> Drama, 2744 -> Drama, 1369 -> Drama|Thriller, 138 -> Drama, 2889 -> Comedy, 1190 -> Drama, 1168 -> Horror, 2295 -> Comedy, 2306 -> Comedy, 3053 -> Drama|War, 3345 -> Adventure|Children's, 760 -..."}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1583295460124_455290007","id":"20200304-041740_1177122869","dateCreated":"2020-03-04T04:17:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2880","text":"val comedyMovies = moviesWithGenres.filter(_._2.matches(\".*Comedy.*\")).keys\nval candidates = sc.parallelize(comedyMovies.toSeq)\nval recommendations = bestModel.get\n  .predict(candidates.map((100, _)))\n  .collect()\n  .sortBy(- _.rating)\n  .take(5)\n\nvar i = 1\nprintln(\"Comedy Movies recommended for you:\")\nrecommendations.foreach { r =>\n  println(\"%2d\".format(i) + \": \" + movies(r.product))\n  i += 1\n}","dateUpdated":"2020-03-04T04:17:47+0000","dateFinished":"2020-03-04T04:17:47+0000","dateStarted":"2020-03-04T04:17:47+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Comedy Movies recommended for you:\n 1: Bewegte Mann, Der (1994)\n 2: Man of the Century (1999)\n 3: Smashing Time (1967)\n 4: Close Shave, A (1995)\n 5: Wrong Trousers, The (1993)\ncomedyMovies: Iterable[Int] = Set(2163, 892, 69, 1665, 3873, 3944, 3883, 2889, 2295, 2306, 101, 2109, 1454, 2031, 2072, 3399, 909, 3477, 333, 2463, 3397, 3830, 518, 2499, 1083, 468, 234, 2331, 3566, 88, 352, 1855, 3534, 1211, 1158, 582, 762, 3072, 1005, 115, 3317, 276, 2622, 3858, 3905, 2381, 2395, 2659, 3417, 3040, 2953, 3460, 1569, 2248, 3912, 1073, 2671, 2014, 5, 3108, 3012, 449, 2282, 2837, 1269, 440, 655, 2380, 1793, 597, 2195, 1078, 3530, 3794, 3120, 3429, 3049, 3004, 2035, 550, 2918, 500, 3175, 797, 3446, 2141, 472, 3616, 3693, 1919, 3253, 747, 3481, 3562, 1640, 945, 3313, 2042, 153, 3276, 829, 174, 1746, 898, 3836, 3629, 1001, 2723, 1914, 2491, 1243, 1782, 1391, 1441, 417, 3088, 3777, 3308, 2886, 1359, 3466, 3898, 2082, 3140, 3809, 2136, 1904, 1265, 1703, 2405, 1482, 3597, 3688,..."}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1583295467419_-1165386559","id":"20200304-041747_577651348","dateCreated":"2020-03-04T04:17:47+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2979"}],"name":"SparkML2","id":"2F4QHGCD9","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}